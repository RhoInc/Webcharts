{"version":3,"sources":["main.js","assignment.js","init.js","checkRequired.js","reset.js","layout.js","makeControlItem.js","makeTextControl.js","makeListControl.js","makeNumberControl.js","makeDropdownControl.js","makeBtnGroupControl.js","makeLabelerControl.js","toggleDisabled.js","makeToggleControl.js","makeRadioControl.js","makeSetControl.js","makeSubsetterControl.js","setSubsetter.js","getValType.js","drawOptions.js","makeFilterControl.js","extraControlInfo.js","controlUpdate.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controls.js","sourcesContent":["/**The base Controls object.\r\n\t*@alias module:webCharts.Controls\r\n\t*@constructor\r\n\t*@param {string} element - CSS selector identifying the element in which to create the chart.\r\n\t*@param {string} filepath - path to the file containing data for the chart. Expected to be a text file of comma-separated values.\r\n\t*@param {Object} config - the configuration object specifying all options for how the chart is to appear and behave.\r\n\t*@param {Controls} controls - Controls instance that will be linked to this chart instance.\r\n*/\r\nvar Controls = function(element, data, config, defaults, callback){\r\n\tif(config.location === \"top\")\r\n   \t\tthis.div = d3.select(element).insert(\"div\", \":first-child\").attr(\"class\", \"wc-controls top\");\r\n\telse\r\n  \t\tthis.div = d3.select(element).append(\"div\").attr(\"class\", \"wc-controls \"+config.location);\r\n  this.element = element;\r\n\tthis.data = data || [];\r\n\tthis.config = config;\r\n  this.config.controls = this.config.controls || [];\r\n\tthis.defaults = defaults ? defaults : {resizable: true, max_width: 800};\r\n\tthis.callback = callback;\r\n  this.targets = [];\r\n\r\n\tthis.div.selectAll(\".changer\").each(function(e,i){\r\n    if(e.links){\r\n    \tvar value = d3.select(this).attr(\"type\") === \"checkbox\" ? !d3.select(this).property(\"checked\") : d3.select(this).property(\"value\");\r\n    \ttoggleDisabled(value, e.links);\r\n    }\r\n  });\r\n\r\n  return this;\r\n};\r\n","dataControls.controls = Controls;","Controls.prototype.init = function(raw){\r\n  \tthis.data = raw;\r\n    if(!this.config.builder)\r\n  \t this.checkRequired(this.data);\r\n  \tthis.layout();\r\n    this.ready = true;\r\n};","Controls.prototype.checkRequired = function(dataset){\r\n   \tvar context = this;\r\n   \tvar colnames = d3.keys(dataset[0]);\r\n   \tvar controls = context.config.controls;\r\n    console.log('line 5??')\r\n    if(!controls)\r\n      return;\r\n   \tcontrols.forEach(function(e,i){\r\n    \tif(controls.type === \"subsetter\" && colnames.indexOf(e.value_col) === -1){\r\n      \t\t//d3.select(context.target.div).select(\".loader\").remove();\r\n      \t\tcontrols = controls.splice(controls[i],1);\r\n      \t\tthrow new Error( \"Error in settings object: the value '\"+e.value_col+\"' does not match any column in the provided dataset.\" );\r\n    \t}\r\n  \t});\r\n};","Controls.prototype.reset = function(new_file){\r\n\tthis.div.selectAll(\"*\").remove();\r\n\t\r\n\tthis.layout();\r\n    this.ready = true;\r\n\t// context.target.wrap.selectAll(\"*\").remove();\r\n\t// context.target.config = context.defaults;\r\n\t// context.target.filepath = new_file;\r\n\t// context.target.init();\r\n};","Controls.prototype.layout = function(){\r\n    this.div.selectAll(\"*\").remove();\r\n    this.div.append(\"div\").attr(\"class\", \"main-settings\");\r\n    this.div.append(\"div\").attr(\"class\", \"advanced-settings\");\r\n   \tthis.controlUpdate();\r\n   \tif(this.callback)\r\n   \t\tthis.callback(this);\r\n};","Controls.prototype.makeControlItem = function(control, div1, div2){\r\n    var control_section = control.advanced ? div2 : div1;\r\n    var control_wrap = control_section.insert(\"div\", \".adv-btn\")\r\n      .attr(\"class\", \"control-group\")\r\n      .classed(\"inline\", control.inline)\r\n      .datum(control);\r\n    var ctrl_label = control_wrap.append(\"span\").attr(\"class\", \"control-label\").text(control.label);\r\n    if(control.required)\r\n      ctrl_label.append(\"span\").attr(\"class\", \"label label-required\").text(\"Required\");\r\n    control_wrap.append(\"span\").attr(\"class\", \"span-description\").text(control.description);\r\n\r\n    if(control.type === \"text\")\r\n    \tthis.makeTextControl(control, control_wrap)\r\n    else if(control.type === \"number\")\r\n    \tthis.makeNumberControl(control, control_wrap)\r\n    else if(control.type ===  \"list\")\r\n    \tthis.makeListControl(control, control_wrap);\r\n    else if(control.type === \"dropdown\")\r\n    \tthis.makeDropdownControl(control, control_wrap);\r\n    else if(control.type === \"btngroup\")\r\n    \tthis.makeBtnGroupControl(control, control_wrap);\r\n    else if(control.type === \"toggle\")\r\n    \tthis.makeToggleControl(control, control_wrap);\r\n    else if(control.type === \"radio\")\r\n    \tthis.makeRadioControl(control, control_wrap);\r\n    else if(control.type === \"set\")\r\n    \tthis.makeSetControl(control, control_wrap);\r\n    else if(control.type === \"paired_list\")\r\n    \tthis.makePairedListControl(control, control_wrap);\r\n    else if(control.type === \"subsetter\")\r\n    \tthis.makeSubsetterControl(control, control_wrap);\r\n    else if(control.type === \"filter\")\r\n    \tthis.makeFilterControl(control, control_wrap);\r\n   else\r\n      throw new Error(\"Each control must have a type! Choose from: 'text', 'number', 'list', 'dropdown', 'toggle', 'radio', 'set', 'subsetter', 'btngroup'\");\r\n};","Controls.prototype.makeTextControl = function(control, control_wrap){\r\n    var changer = control_wrap.append(\"input\").attr(\"type\", \"text\").attr(\"class\", \"changer\").datum(control);\r\n    context.targets.forEach(function(e){\r\n      if(e.config[control.option])\r\n        changer.property(\"value\", e.config[control.option]);\r\n    });\r\n    \r\n    changer.on(\"change\", function(d){\r\n    \tvar value = d3.select(this).property(\"value\");\r\n      context.targets.forEach(function(e){\r\n        if(!e.config[d.option])\r\n          e.config[d.option] = {};\r\n        e.config[d.option] = value;\r\n        e.draw();\r\n      });\r\n    });\r\n  };","Controls.prototype.makeListControl = function(control, control_wrap){\r\n    var changer = control_wrap.append(\"input\").attr(\"type\", \"text\").attr(\"class\", \"changer\").datum(control);\r\n    context.targets.forEach(function(e){\r\n      if(e.config[control.option])\r\n        changer.property(\"value\", e.config[control.option]);\r\n    });\r\n    \r\n    changer.on(\"change\", function(d){\r\n      var value = d3.select(this).property(\"value\") ? d3.select(this).property(\"value\").split(\",\").map(function(m){return m.trim()}) : null;\r\n      context.targets.forEach(function(e){\r\n        if(!e.config[d.option])\r\n          e.config[d.option] = {};\r\n        e.config[d.option] = value;\r\n        e.draw();\r\n      });\r\n    });\r\n  };","Controls.prototype.makeNumberControl = function(control, control_wrap){\r\n      var changer = control_wrap.append(\"input\").attr(\"type\", \"number\").attr(\"min\", \"0\").attr(\"step\", control.step || 1)\r\n        .attr(\"class\", \"changer\").datum(control);\r\n      var partial = control.option.indexOf(\".\") !== -1;\r\n      var option_name = partial ? control.option.split(\".\")[0] : control.option;\r\n      context.targets.forEach(function(e){\r\n        if(e.config[option_name])\r\n          changer.property(\"value\", +e.config[option_name]);\r\n      });\r\n     \r\n      changer.on(\"change\", function(d){\r\n      \tvar value = +d3.select(this).property(\"value\");\r\n        context.targets.forEach(function(e){\r\n          if(!e.config[option_name])\r\n            e.config[option_name] = {};\r\n          if(partial)\r\n            e.config[option_name][control.option.split(\".\")[1]] = value;\r\n          else\r\n            e.config[option_name] = value;\r\n          e.draw();\r\n        });\r\n        \r\n      });\r\n  };","Controls.prototype.makeDropdownControl = function(control, control_wrap){\r\n  var context = this;\r\n    var partial = control.option.indexOf(\".\") !== -1;\r\n    var option_name = partial ? control.option.split(\".\")[0] : control.option;\r\n    var changer = control_wrap.append(\"select\").attr(\"class\", \"changer\")\r\n    \t.attr(\"multiple\", control.multiple ? true : null)\r\n      .datum(control);\r\n\r\n    var opt_values = control.values ? control.values instanceof Array ? control.values : \r\n      \td3.set(context.data.map(function(m){return m[context.targets[0].config[control.values] ]} )).values() : null;\r\n    \r\n    var option_data = opt_values ? opt_values.map(function(m){return {label: m}}) : d3.keys(context.data[0]).map(function(m){return {label: m}});\r\n    \r\n    if(!control.require || control.none)\r\n    \toption_data.unshift({label: \"None\"});\r\n\r\n    var options = changer.selectAll(\"option\").data(option_data).enter().append(\"option\").text(function(d){return d.label});\r\n\r\n    context.targets.forEach(function(e){\r\n      if(e.config[option_name])\r\n        changer.property(\"value\", partial ? e.config[option_name][control.option.split(\".\")[1]] : e.config[option_name]);\r\n      else\r\n        changer.property(\"value\", control.require ? \"\" : \"None\");\r\n    });\r\n    \r\n    changer.on(\"change\", function(d){\r\n    \tvar value = d3.select(this).property(\"value\");\r\n      if(control.multiple)\r\n       \tvar values = options.filter(function(f){return d3.select(this).property(\"selected\")})[0].map(function(m){return d3.select(m).property(\"value\")}).filter(function(f){return f !== \"None\"});\r\n\r\n      value = value === \"None\" ? null : value;\r\n\r\n      context.targets.forEach(function(e){\r\n        if(!e.config[option_name]){\r\n          e.config[option_name] = control.multiple ? [] : {};\r\n        }\r\n        if(partial){\r\n          if(control.multiple){\r\n            if(control.labeler){\r\n                e.config[option_name] = values.map(function(m,i){\r\n                  var existing = e.config[option_name].filter(function(f){return f[control.option.split(\".\")[1]] === m});\r\n                  var obj = existing.length ? existing[0] : {}\r\n                  obj[control.option.split(\".\")[1]] = m;\r\n                  return obj;\r\n                });\r\n              }\r\n              else\r\n                e.config[option_name][control.option.split(\".\")[1]] = values;\r\n            }\r\n            else\r\n              e.config[option_name][control.option.split(\".\")[1]] = value;\r\n        }\r\n        else\r\n          e.config[option_name] = control.multiple ? values : value;\r\n        if(control.labeler){\r\n          var value_data = control.multiple ? values : value;\r\n          makeLabelerControl(control, control_wrap, value_data);\r\n        }\r\n        \r\n        e.draw();\r\n      });\r\n      \r\n      if(control.links)\r\n       \ttoggleDisabled(value, control.links)\r\n    });\r\n\r\n    return changer;\r\n  };","Controls.prototype.makeBtnGroupControl = function(control, control_wrap){\r\n    var partial = control.option.indexOf(\".\") !== -1;\r\n    var option_name = partial ? control.option.split(\".\")[0] : control.option;\r\n    var option_data = control.values ? control.values : d3.keys(context.data[0]).map(function(m){return {label: m, val: m}});\r\n    control_wrap = control_wrap.append(\"div\").attr(\"class\", \"btn-group\")\r\n    var changers = control_wrap.selectAll(\"button\")\r\n      \t.data(option_data)\r\n      \t.enter().append(\"button\").attr(\"class\", \"btn btn-default btn-sm\").text(function(d){return d.label})\r\n    context.targets.forEach(function(e){\r\n      changers.classed(\"btn-primary\", function(d){\r\n          return d.selected || (e.config[option_name] && e.config[option_name] === d.val) ? true : false;\r\n        });\r\n    });\r\n\r\n    changers.on(\"click\", function(d){\r\n       changers.classed(\"btn-primary\", false)\r\n       d3.select(this).classed(\"btn-primary\", true);\r\n       var value = d.val;\r\n       var datum = control_wrap.datum();\r\n       if(!context.target.config[datum.option])\r\n       \tcontext.target.config[datum.option] = {};\r\n       context.target.config[datum.option] = value;\r\n       context.target.draw();\r\n      });\r\n  };","Controls.prototype.makeLabelerControl = function(control, control_wrap, data){\r\n \t  var partial = control.option.indexOf(\".\") !== -1;\r\n    var option_name = partial ? control.option.split(\".\")[0] : control.option;\r\n\r\n    var labelers = control_wrap.selectAll(\"input.labeler\").data(data, function(d){return d});\r\n    labelers.exit().remove();\r\n    labelers.enter().append(\"input\").attr(\"type\", \"text\").attr(\"class\", \"changer labeler\")\r\n    labelers.attr(\"placeholder\", function(d){return \"label for \"+d})\r\n      \t.on(\"change\", function(d){\r\n         \tvar value = d3.select(this).property(\"value\");\r\n          context.targets.forEach(function(target){\r\n           \tif(control.multiple){\r\n            \ttarget.config[option_name].forEach(function(e){\r\n            \t\tif(e[control.option.split(\".\")[1]] === d)\r\n               \t\te.label = value;\r\n            \t});\r\n          \t}\r\n          \telse\r\n            \ttarget.config[option_name].label = value;\r\n          \ttarget.draw();\r\n          });\r\n      \t});\r\n  };","Controls.prototype.toggleDisabled = function(toggle, links){\r\n    links.forEach(function(e){\r\n    \tcontext.div.select(\".control-section\").selectAll(\".changer\").each(function(f){\r\n       \tif(e.options.indexOf(f.option) !== -1)\r\n         \t\td3.select(this).attr(\"disabled\", e.val === toggle ? true : null);\r\n      \t});\r\n    });   \r\n  };","Controls.prototype.makeToggleControl = function(control, control_wrap){\r\n      control_wrap.select(\".control-label\");//.classed(\"inline\", true);\r\n      var changer = control_wrap.append(\"input\").attr(\"type\", \"checkbox\").attr(\"class\", \"changer\").datum(control);\r\n      context.targets.forEach(function(e){\r\n        if(e.config[control.option])\r\n          changer.property(\"checked\", e.config[control.option]);\r\n      });\r\n\r\n      changer.on(\"change\", function(d){\r\n      \tvar value = d3.select(this).property(\"checked\");\r\n        context.targets.forEach(function(e){\r\n        \tif(!e.config[d.option])\r\n           \te.config[d.option] = {};\r\n          e.config[d.option] = value;\r\n          e.draw();\r\n        \tif(control.links)\r\n         \t  toggleDisabled(!value, control.links);\r\n        });\r\n      });\r\n  };","Controls.prototype.makeRadioControl = function(control, control_wrap){\r\n      var partial = control.option.indexOf(\".\") !== -1;\r\n      var option_name = partial ? control.option.split(\".\")[0] : control.option;\r\n      var changers = control_wrap.selectAll(\"label\")\r\n      \t.data(control.values)\r\n      \t.enter().append(\"label\").attr(\"class\", \"radio\").text(function(d,i){return control.relabels ? control.relabels[i] : d})\r\n      .append(\"input\")\r\n        \t.attr(\"type\", \"radio\").attr(\"class\", \"changer\")\r\n        \t.attr(\"name\", option_name+\"-\"+Math.random()).property(\"value\", function(d){return d})\r\n        \t.property(\"checked\", function(d){\r\n           \tif(partial)\r\n            \treturn context.targets[0].config[option_name] && context.targets[0].config[option_name][control.option.split(\".\")[1]] && \r\n            \t\tcontext.targets[0].config[option_name][control.option.split(\".\")[1]] === d ? true : false;\r\n          \telse\r\n            \treturn context.targets[0].config[option_name] && context.targets[0].config[option_name] === d ? true : false;\r\n          })\r\n        \t//.datum(control);\r\n\r\n      context.targets.forEach(function(e){\r\n        if(!e.config[option_name] && partial)\r\n          e.config[option_name] = {};\r\n      });\r\n\r\n      changers.on(\"change\", function(d){\r\n      \tvar value = null;\r\n      \tchangers.each(function(c){\r\n         \tif(d3.select(this).property(\"checked\"))\r\n            \tvalue = d3.select(this).property(\"value\") === \"none\" ? null : c//d3.select(this).property(\"value\");\r\n        \t});\r\n          context.targets.forEach(function(e){\r\n            if(partial)\r\n              e.config[option_name][control.option.split(\".\")[1]] = value;\r\n            else\r\n              e.config[option_name] = value;\r\n            e.draw();\r\n          });\r\n      });\r\n  };","Controls.prototype.makeSetControl = function(control, control_wrap){\r\n    control.set.forEach(function(e){\r\n    \tvar changer = control_wrap.append(\"input\").attr(\"type\", \"number\").attr(\"class\", \"inline\").attr(\"placeholder\", e).datum(e);\r\n      if(context.target.config[control.option])\r\n      changer.property(\"value\", context.target.config[control.option][e]);\r\n    \tchanger.on(\"change\", function(d){\r\n       \tvar value = d3.select(this).property(\"value\");\r\n       \tcontext.target.config[control.option][d] = +value;\r\n       \tcontext.target.draw();\r\n      });\r\n    });\r\n  };","Controls.prototype.makeSubsetterControl = function(control, control_wrap){\r\n  var context = this;\r\n   \tvar changer = control_wrap.append(\"select\").attr(\"class\", \"changer\").attr(\"multiple\", control.multiple ? true : null).datum(control);\r\n    var option_data = control.values ? control.values : \r\n    \td3.set(context.data.map(function(m){return m[control.value_col]}).filter(function(f){return f}) ).values();\r\n    option_data.sort(d3.ascending);\r\n    control.start = control.start ? control.start : control.loose ? option_data[0] : null;\r\n    if(!control.multiple && !control.start)\r\n    \toption_data.unshift(\"All\");\r\n    //option_data.sort();\r\n    control.loose = !control.loose && control.start ? true : control.loose;\r\n    var options = changer.selectAll(\"option\").data(option_data).enter().append(\"option\").text(function(d){return d})\r\n    \t.property(\"selected\", function(d){return d === control.start});\r\n\r\n    context.targets.forEach(function(e){\r\n      var match = e.filters.slice().map(function(m){return m.col === control.value_col}).indexOf(true);\r\n      if(match > -1)\r\n        e.filters[match] = {col: control.value_col, val: control.start ? control.start : \"All\", choices: option_data, loose: control.loose}\r\n      else\r\n        e.filters.push({col: control.value_col, val: control.start ? control.start : \"All\", choices: option_data, loose: control.loose});\r\n    });\r\n\r\n    if(control.chosen){//chosen plugin\r\n      $(changer.node()).chosen(control.chosen).change(function(){\r\n        var d = d3.select(this).datum();\r\n        doTheSubset(d, 0, 0, this);\r\n        $(this).trigger(\"chosen:updated\");\r\n      });\r\n    }\r\n    else\r\n      changer.on(\"change\", doTheSubset);\r\n\r\n    function doTheSubset(d,i,c, current_context){\r\n      var this_subsetter = current_context || this;\r\n      if(control.multiple){\r\n        var values = options.filter(function(f){return d3.select(this).property(\"selected\")})[0].map(function(m){return d3.select(m).property(\"value\")});\r\n\r\n        var new_filter = {col: control.value_col, val: values, choices: option_data, loose: control.loose};\r\n        context.targets.forEach(function(e){\r\n          context.setSubsetter(e, new_filter)\r\n          e.draw();\r\n        });\r\n      }\r\n      else{\r\n        var value = d3.select(this_subsetter).property(\"value\");\r\n        var new_filter = {col: control.value_col, val: value, choices: option_data, loose: control.loose};\r\n        context.targets.forEach(function(e){\r\n          context.setSubsetter(e, new_filter)\r\n          e.draw();\r\n        });\r\n      };\r\n      if(control.callback){\r\n        context.targets.forEach(function(e){\r\n          control.callback(e)\r\n        });\r\n      }\r\n    };\r\n\r\n    if(control.chosen)//chosen plugin\r\n      $(this).trigger(\"chosen:updated\");\r\n  \r\n  };","Controls.prototype.setSubsetter = function(target, obj){\r\n      var match = -1;\r\n      target.filters.forEach(function(e,i){\r\n         if(e.col === obj.col)\r\n         \tmatch = i;\r\n      });\r\n      if(match > -1)\r\n      \ttarget.filters[match] = obj;\r\n  };","Controls.prototype.getValType = function(variable){\r\n   \tvar var_vals = d3.set(context.data.map(function(m){return m[variable]})).values();\r\n      var vals_numbers = var_vals.filter(function(f){return +f || f==\"NA\" || f==0 });\r\n      if(var_vals.length === vals_numbers.length && var_vals.length > 4)\r\n      \treturn {type: \"num\", values: var_vals, varname: variable};\r\n      else\r\n      \treturn {type: \"cat\", values: var_vals, varname: variable};\r\n  };","Controls.prototype.drawOptions = function(element, filt_data, option, variable){\r\n   \tvar div = d3.select(element);\r\n      div.selectAll(\".filter-values\").remove();\r\n      if(filt_data.type === \"cat\"){ \r\n      \tvar filt_values = div.selectAll(\".filter-values\").data(filt_data.values.sort());\r\n      \tif(variable && variable !== \"None\"){\r\n         \tvar filt_buttons = filt_values.enter().append(\"label\").attr(\"class\", \"filter-values\");\r\n         \tfilt_buttons.append(\"input\")\r\n            \t.attr(\"type\", \"checkbox\")\r\n              \t.property(\"checked\", true)\r\n              \t.on(\"change\", function(d){\r\n                 \tvar chosen_filts = filt_values.filter(function(f){return d3.select(this).select(\"input\").property(\"checked\")}).data();\r\n                 \tvar value = d3.select(this).property(\"value\");\r\n                  context.targets.forEach(function(target){\r\n                    target.config[option] = {col: variable, vals: chosen_filts};\r\n                    target.draw();\r\n                  });\r\n              \t});\r\n          \tfilt_buttons.append(\"span\").text(function(d){return d ? d : \"N/A\"})\r\n        };\r\n      }\r\n      else if(filt_data.type === \"num\"){\r\n      \tvar missing_data = filt_data.values.indexOf(\"NA\") !== -1;\r\n      \tfilt_data.values = filt_data.values.filter(function(f){return f !== \"NA\"});\r\n      \tvar range_div = div.append(\"div\").attr(\"class\",\"numeric filter-values\").datum(filt_data);\r\n      \trange_div.append(\"span\").attr(\"class\",\"slider-label min\").text(d3.min(filt_data.values));\r\n      \trange_div.append(\"span\").attr(\"class\",\"slider-label max pull-right\").text(d3.max(filt_data.values));\r\n      \tvar range_slider = range_div.append(\"div\").attr(\"class\",\"range\");\r\n        \t$(range_div.node()).find(\"div.range\").slider({\r\n         \trange: true,\r\n         \tmin: +d3.min(filt_data.values),\r\n         \tmax: +d3.max(filt_data.values),\r\n         \tvalues: d3.extent(filt_data.values).map(function(m){return +m}),\r\n         \tslide: function(event, ui){\r\n            \t//update the labels\r\n            \t$( \"span.min\", range_div.node() ).text( ui.values[ 0 ]);\r\n            \t$( \"span.max\", range_div.node() ).text( ui.values[ 1 ]);\r\n\r\n            \t//update the settings object\r\n            \tvar chosen_filts = filt_data.values.filter(function(f){\r\n              \t\treturn +f >= ui.values[0] && +f <= ui.values[1];\r\n            \t});\r\n            \tcontext.targets.forEach(function(target){\r\n                target.config[option] = {col: variable, vals: chosen_filts};\r\n                target.draw();\r\n              });       \r\n          \t}\r\n        \t});\r\n      };\r\n   };","Controls.prototype.makeFilterControl = function(control, control_wrap){\r\n      var changer = makeDropdownControl(control, control_wrap);\r\n      changer.on(\"change\", function(d){\r\n      \tvar value = d3.select(this).property(\"value\");\r\n        context.targets.forEach(function(target){\r\n          if(!target.config[d.option])\r\n            target.config[d.option] = {};\r\n          target.config[d.option].col = value;\r\n        })\r\n        \r\n      \tvar filt_data = getValType(value);\r\n      \tdrawOptions(this.parentNode, filt_data, d.option, value);\r\n      });\r\n   };","Controls.prototype.extraControlInfo = function(){\r\n   \t  this.div.select(\".control-section\").selectAll(\".control-group\").each(function(e){\r\n\t      if(e.require){\r\n\t      \td3.select(this).select(\".control-label\").append(\"span\")\r\n\t         \t.attr(\"class\", \"label label-required\")\r\n\t         \t.text(\"Required\")\r\n\t      };\r\n\t      if(e.description){\r\n\t      \td3.select(this).insert(\"span\", \".changer\")\r\n\t         \t.attr(\"class\", \"span-description\")\r\n\t         \t.text(e.description)\r\n\t      };\r\n    \t});\r\n  \t};","Controls.prototype.controlUpdate = function(){\r\n   \tvar control_div = this.div.select(\".main-settings\");\r\n   \tvar advanced_div = this.div.select(\".main-settings\");\r\n   \tvar context = this;\r\n\r\n   \tif(this.config.controls && this.config.controls.length && this.config.controls[0])\r\n      \tthis.config.controls.forEach(function(e){context.makeControlItem(e,control_div,advanced_div) });\r\n  };"],"sourceRoot":"/source/"}